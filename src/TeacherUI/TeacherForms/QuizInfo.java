/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package TeacherUI.TeacherForms;

import Data.Controller.AddData;
import static Data.Controller.PopulateTable.PopulateStudentInfoToQuizTable;
import Data.Models.ModelQuiz;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class QuizInfo extends javax.swing.JPanel {

    private AddData datacontroller;
    private DefaultTableModel quizDataTableModel;
    public QuizInfo() {
        initComponents();
        statusField.setVisible(false);
        quizNo.setVisible(false);
        courseCode.setVisible(false);
        courseName.setVisible(false);
        studentName.setVisible(false);
        studentId.setVisible(false);
        id.setVisible(false);
        datacontroller = new AddData(quizDataTableModel);
    }
    public void updateBtn() {
    int idData = Integer.parseInt(id.getText());
    String courseCodeToUpdate = courseCode.getText();
    String quizName = quizNo.getText();
        ModelQuiz updatedData = new ModelQuiz(courseCodeToUpdate, courseName.getText(), studentId.getText(), studentName.getText(), quizName, quizResult.getText(),quizTotal.getText(), statusField.getText());
    // Update the course in the database
    datacontroller.updateStudentQuizToDatabase(updatedData, idData);
    
    // Update the table
    
    PopulateStudentInfoToQuizTable(QuizInfo.quizTable,quizName, courseCodeToUpdate);
    TextFieldEmpty();
}
    public void TextFieldEmpty(){
        courseCode.setText("");
        courseName.setText("");
        studentName.setText("");
        studentId.setText("");
        quizNo.setText("");
        quizResult.setText("");
        quizTotal.setText("");
        statusField.setText("");
        id.setText("");
    }
    private boolean validateFields() {
    if (quizResult.getText().trim().isEmpty() || quizTotal.getText().trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please enter values for both Quiz Result and Quiz Total.", 
                                      "Input Error", JOptionPane.ERROR_MESSAGE);
        return false;
    }
    try {
        // Try parsing values to ensure they are numbers
        Double.parseDouble(quizResult.getText().trim());
        Double.parseDouble(quizTotal.getText().trim());
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Please enter valid numbers in the fields.", 
                                      "Input Error", JOptionPane.ERROR_MESSAGE);
        return false;
    }
    return true;
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        quizTable = new javax.swing.JTable();
        quizNo = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        statusField = new javax.swing.JLabel();
        courseCode = new javax.swing.JLabel();
        courseName = new javax.swing.JLabel();
        studentId = new javax.swing.JLabel();
        studentName = new javax.swing.JLabel();
        id = new javax.swing.JLabel();
        quizResult = new javax.swing.JTextField();
        quizTotal = new javax.swing.JTextField();
        pictureBox1 = new Swing.PictureBox();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        quizTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Course Code", "Course Name", "Student ID", "Student Name", "Quiz No.", "Quiz Result", "Quiz Total", "Status", "id"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        quizTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                quizTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(quizTable);
        if (quizTable.getColumnModel().getColumnCount() > 0) {
            quizTable.getColumnModel().getColumn(0).setResizable(false);
            quizTable.getColumnModel().getColumn(1).setResizable(false);
            quizTable.getColumnModel().getColumn(2).setResizable(false);
            quizTable.getColumnModel().getColumn(3).setResizable(false);
            quizTable.getColumnModel().getColumn(4).setResizable(false);
            quizTable.getColumnModel().getColumn(5).setResizable(false);
            quizTable.getColumnModel().getColumn(6).setResizable(false);
            quizTable.getColumnModel().getColumn(7).setResizable(false);
            quizTable.getColumnModel().getColumn(8).setMinWidth(0);
            quizTable.getColumnModel().getColumn(8).setPreferredWidth(0);
            quizTable.getColumnModel().getColumn(8).setMaxWidth(0);
        }

        jLabel2.setText("Quiz Result");

        jLabel3.setText("Quiz Total");

        pictureBox1.setImage(new javax.swing.ImageIcon(getClass().getResource("/Icons/icons8-available-updates-48 (1).png"))); // NOI18N
        pictureBox1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pictureBox1MouseClicked(evt);
            }
        });

        jLabel1.setText("Update");
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(courseCode)
                        .addGap(0, 0, 0)
                        .addComponent(statusField)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(courseName)
                                .addGap(94, 94, 94)
                                .addComponent(studentId))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(quizNo))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(104, 104, 104)
                                .addComponent(studentName))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(quizResult, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(51, 51, 51)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(quizTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(pictureBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(id)
                .addGap(164, 164, 164))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 732, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                                .addComponent(quizTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(quizResult, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(pictureBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(courseCode)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(courseName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(studentId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(quizNo))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(studentName, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(106, 106, 106)
                .addComponent(statusField)
                .addGap(36, 36, 36))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void quizTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_quizTableMouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) quizTable.getModel();
        int selectIndex = quizTable.getSelectedRow();
        courseCode.setText(model.getValueAt(selectIndex, 0).toString());
        courseName.setText(model.getValueAt(selectIndex, 1).toString());
         studentId.setText(model.getValueAt(selectIndex , 2).toString());
         studentName.setText(model.getValueAt(selectIndex , 3).toString());
         quizNo.setText(model.getValueAt(selectIndex, 4).toString());
         quizResult.setText(model.getValueAt(selectIndex, 5).toString());
         quizTotal.setText(model.getValueAt(selectIndex, 6).toString());
         statusField.setText(model.getValueAt(selectIndex, 7).toString());
         id.setText(model.getValueAt(selectIndex , 8).toString());
    }//GEN-LAST:event_quizTableMouseClicked

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        // TODO add your handling code here:
        if (courseCode.getText().trim().isEmpty() || 
        courseName.getText().trim().isEmpty() || 
        studentId.getText().trim().isEmpty() || 
        studentName.getText().trim().isEmpty() || 
        quizNo.getText().trim().isEmpty()) {

        // Display a message if any fields are empty
        JOptionPane.showMessageDialog(this, "Please select a student's data", 
                                      "Input Error", JOptionPane.ERROR_MESSAGE);
        return; // Exit the method without proceeding further
    }
        if (validateFields()) {
        // Proceed with the rest of the logic
         try {
        // Ensure fields are not empty
        if (quizResult.getText().trim().isEmpty() || quizTotal.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter values for both Quiz Result and Quiz Total.", 
                                          "Input Error", JOptionPane.ERROR_MESSAGE);
            return; // Don't proceed if fields are empty
        }
        
        // Parse the input from examResult and examTotal JTextFields
        double quizResultValue = Double.parseDouble(quizResult.getText().trim());
        double quizTotalValue = Double.parseDouble(quizTotal.getText().trim());

        // Check if examResult is 75% or more of examTotal
        double percentage = (quizResultValue / quizTotalValue) * 100;

        // Determine pass or fail
        if (percentage >= 75) {
            statusField.setText("Passed");
        } else {
            statusField.setText("Failed");
        }

    } catch (NumberFormatException e) {
        // Handle invalid number input
        JOptionPane.showMessageDialog(this, "Please enter valid numbers in the fields.", 
                                      "Input Error", JOptionPane.ERROR_MESSAGE);
        return; // Exit method if the input is invalid
    }
        updateBtn();
    }
    }//GEN-LAST:event_jLabel1MouseClicked

    private void pictureBox1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pictureBox1MouseClicked
        // TODO add your handling code here:
        if (courseCode.getText().trim().isEmpty() || 
        courseName.getText().trim().isEmpty() || 
        studentId.getText().trim().isEmpty() || 
        studentName.getText().trim().isEmpty() || 
        quizNo.getText().trim().isEmpty()) {

        // Display a message if any fields are empty
        JOptionPane.showMessageDialog(this, "Please select a student's data", 
                                      "Input Error", JOptionPane.ERROR_MESSAGE);
        return; // Exit the method without proceeding further
    }
        if (validateFields()) {
        // Proceed with the rest of the logic
         try {
        // Ensure fields are not empty
        if (quizResult.getText().trim().isEmpty() || quizTotal.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter values for both Quiz Result and Quiz Total.", 
                                          "Input Error", JOptionPane.ERROR_MESSAGE);
            return; // Don't proceed if fields are empty
        }
        
        // Parse the input from examResult and examTotal JTextFields
        double quizResultValue = Double.parseDouble(quizResult.getText().trim());
        double quizTotalValue = Double.parseDouble(quizTotal.getText().trim());

        // Check if examResult is 75% or more of examTotal
        double percentage = (quizResultValue / quizTotalValue) * 100;

        // Determine pass or fail
        if (percentage >= 75) {
            statusField.setText("Passed");
        } else {
            statusField.setText("Failed");
        }

    } catch (NumberFormatException e) {
        // Handle invalid number input
        JOptionPane.showMessageDialog(this, "Please enter valid numbers in the fields.", 
                                      "Input Error", JOptionPane.ERROR_MESSAGE);
        return; // Exit method if the input is invalid
    }
        updateBtn();
    }
    }//GEN-LAST:event_pictureBox1MouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel courseCode;
    private javax.swing.JLabel courseName;
    private javax.swing.JLabel id;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private Swing.PictureBox pictureBox1;
    private javax.swing.JLabel quizNo;
    private javax.swing.JTextField quizResult;
    public static javax.swing.JTable quizTable;
    private javax.swing.JTextField quizTotal;
    private javax.swing.JLabel statusField;
    private javax.swing.JLabel studentId;
    private javax.swing.JLabel studentName;
    // End of variables declaration//GEN-END:variables
}
