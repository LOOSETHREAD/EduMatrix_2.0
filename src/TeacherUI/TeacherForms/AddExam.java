/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package TeacherUI.TeacherForms;

import Data.Controller.AddData;
import Data.Controller.PopulateTable;
import static Data.Controller.PopulateTable.populateExamToAddExamTable;
import Data.Database.DatabaseConnection;
import Data.Models.ModelExam;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class AddExam extends javax.swing.JPanel {

    private AddData datacontroller;
    private DefaultTableModel courseTableModel;
    private DefaultTableModel examTableModel;
    public AddExam() {
        initComponents();
        datacontroller = new AddData(examTableModel);
        examTableModel = (DefaultTableModel) examTable.getModel();
        courseTableModel = (DefaultTableModel) courseTable.getModel();
        PopulateTable.populateExamToAddExamTable(examTable);
        PopulateTable.populateCourseTable(courseTable);
        centerDataTable1();
        centerDataTable2();
    }
    public JLabel getCourseCodeLabel() {
    return courseCode;
}
    public JLabel getCourseNameLabel() {
    return courseName;
}
    private void centerDataTable1(){
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
        for (int i = 0; i <examTable.getColumnModel().getColumnCount(); i++) {
            examTable.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }

        // Center the header text
        DefaultTableCellRenderer headerRenderer = (DefaultTableCellRenderer) examTable.getTableHeader().getDefaultRenderer();
        headerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
    }
    private void centerDataTable2(){
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
        for (int i = 0; i <courseTable.getColumnModel().getColumnCount(); i++) {
            courseTable.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }

        // Center the header text
        DefaultTableCellRenderer headerRenderer = (DefaultTableCellRenderer) courseTable.getTableHeader().getDefaultRenderer();
        headerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
    }
    private void TextFieldEmpty(){
        courseCode.setText("");
        courseName.setText("");
        examName.setText("");
        id.setText("");
    }
    public void addData(){
        ModelExam newdata = new ModelExam(courseCode.getText(), courseName.getText(),examName.getText());
        // Add quiz to the database
        datacontroller.addExamToDatabase(newdata);
        populateExamToAddExamTable(examTable);
        TextFieldEmpty();
    }
    public void deleteData(){
        ModelExam newdata = new ModelExam(courseCode.getText(), courseName.getText(),examName.getText());
        datacontroller.DeleteExamToDatabase(newdata);
        populateExamToAddExamTable(examTable);
        TextFieldEmpty();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        courseTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        examTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        courseCode = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        courseName = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        examName = new javax.swing.JTextField();
        id = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        pictureBox1 = new Swing.PictureBox();
        pictureBox2 = new Swing.PictureBox();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(41, 78, 89), 6));

        courseTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        courseTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Course Code", "Course Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        courseTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                courseTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(courseTable);
        if (courseTable.getColumnModel().getColumnCount() > 0) {
            courseTable.getColumnModel().getColumn(0).setResizable(false);
            courseTable.getColumnModel().getColumn(1).setResizable(false);
        }

        examTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        examTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Course Code", "Course Name", "Exam Name", "id"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        examTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                examTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(examTable);
        if (examTable.getColumnModel().getColumnCount() > 0) {
            examTable.getColumnModel().getColumn(0).setResizable(false);
            examTable.getColumnModel().getColumn(1).setResizable(false);
            examTable.getColumnModel().getColumn(2).setResizable(false);
            examTable.getColumnModel().getColumn(3).setMinWidth(0);
            examTable.getColumnModel().getColumn(3).setPreferredWidth(0);
            examTable.getColumnModel().getColumn(3).setMaxWidth(0);
        }

        jLabel1.setText("Course Code");

        courseCode.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel2.setText("Course Name");

        courseName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel3.setText("Exam Name");

        examName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel4.setText("Select a Course to add exam : ");

        jLabel5.setText("List of Courses that have exam :");

        pictureBox1.setImage(new javax.swing.ImageIcon(getClass().getResource("/Icons/icons8-add-48 (1).png"))); // NOI18N
        pictureBox1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pictureBox1MouseClicked(evt);
            }
        });

        pictureBox2.setImage(new javax.swing.ImageIcon(getClass().getResource("/Icons/icons8-remove-48 (1).png"))); // NOI18N
        pictureBox2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pictureBox2MouseClicked(evt);
            }
        });

        jLabel6.setText("Add");
        jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel6MouseClicked(evt);
            }
        });

        jLabel7.setText("Delete");
        jLabel7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel7MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(examName, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(pictureBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(17, 17, 17)
                        .addComponent(pictureBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(courseName, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(courseCode, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(courseCode, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addGap(7, 7, 7)
                        .addComponent(courseName, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(examName, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pictureBox1, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                            .addComponent(pictureBox2, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                        .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void courseTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_courseTableMouseClicked
        // TODO add your handling code here:
        int selectIndex = courseTable.getSelectedRow();
        courseCode.setText(courseTableModel.getValueAt(selectIndex, 0).toString());
        courseName.setText(courseTableModel.getValueAt(selectIndex,1).toString());
    }//GEN-LAST:event_courseTableMouseClicked

    private void examTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_examTableMouseClicked
        // TODO add your handling code here:
        int selectIndex = examTable.getSelectedRow();
        courseCode.setText(examTableModel.getValueAt(selectIndex, 0).toString());
        courseName.setText(examTableModel.getValueAt(selectIndex,1).toString());
        examName.setText(examTableModel.getValueAt(selectIndex, 2).toString());
    }//GEN-LAST:event_examTableMouseClicked

    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseClicked
        String coursecode = courseCode.getText().trim(); // Replace with your JLabel variable name
String coursename = courseName.getText().trim();
String examNameValue = examName.getText().trim(); // Replace with your JTextField variable name

// Validate if the exam name is provided
if (examNameValue.isEmpty()) {
    JOptionPane.showMessageDialog(this,
        "Please enter an exam name before proceeding.",
        "Input Required",
        JOptionPane.WARNING_MESSAGE);
    return;
}

// Database connection instance
DatabaseConnection dbConnection = DatabaseConnection.getInstance();

try (Connection conn = dbConnection.getConnection()) {
    // Query to check if the data already exists in the exams table
    String checkSQL = "SELECT COUNT(*) AS count FROM exams WHERE coursecode = ? AND coursename = ? AND examnumber = ?";
    
    // Query to fetch student_name and studentID
    String selectSQL = "SELECT student_name, studentID FROM student_to_course WHERE coursecode = ?";
    
    // Query to insert into the exams table
    String insertSQL = "INSERT INTO exams (coursecode, coursename, studentid, fullname, examnumber, examresult, examtotal, status) " +
                       "VALUES (?, ?, ?, ?, ?, '', '', '')";

    // Check if the data already exists
    try (PreparedStatement checkStmt = conn.prepareStatement(checkSQL)) {
        checkStmt.setString(1, coursecode);
        checkStmt.setString(2, coursename);
        checkStmt.setString(3, examNameValue);

        try (ResultSet rsCheck = checkStmt.executeQuery()) {
            if (rsCheck.next() && rsCheck.getInt("count") > 0) {
                JOptionPane.showMessageDialog(this,
                    "An exam with the same course code, course name, and exam name already exists.",
                    "Duplicate Entry",
                    JOptionPane.WARNING_MESSAGE);
                return; // Exit the method if a duplicate is found
            }
        }
    }

    // Proceed to fetch students and add new records
    try (PreparedStatement selectStmt = conn.prepareStatement(selectSQL)) {
        selectStmt.setString(1, coursecode);

        try (ResultSet rs = selectStmt.executeQuery()) {
            // Check if data exists
            if (!rs.isBeforeFirst()) {
                JOptionPane.showMessageDialog(this,
                    "No students found for course code: " + coursecode,
                    "No Data",
                    JOptionPane.INFORMATION_MESSAGE);
                return;
            }

            // Prepare the INSERT statement
            try (PreparedStatement insertStmt = conn.prepareStatement(insertSQL)) {
                while (rs.next()) {
                    String studentName = rs.getString("student_name");
                    String studentID = rs.getString("studentID");

                    // Set parameters for INSERT
                    insertStmt.setString(1, coursecode);
                    insertStmt.setString(2, coursename);
                    insertStmt.setString(3, studentID);
                    insertStmt.setString(4, studentName);
                    insertStmt.setString(5, examNameValue);

                    // Execute the insert
                    insertStmt.executeUpdate();
                }
            }
        }
    }
} catch (SQLException e) {
    JOptionPane.showMessageDialog(this,
        "Database error: " + e.getMessage(),
        "Error",
        JOptionPane.ERROR_MESSAGE);
    e.printStackTrace();
}
addData();
    }//GEN-LAST:event_jLabel6MouseClicked

    private void pictureBox1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pictureBox1MouseClicked
        String coursecode = courseCode.getText().trim(); // Replace with your JLabel variable name
String coursename = courseName.getText().trim();
String examNameValue = examName.getText().trim(); // Replace with your JTextField variable name

// Validate if the exam name is provided
if (examNameValue.isEmpty()) {
    JOptionPane.showMessageDialog(this,
        "Please enter an exam name before proceeding.",
        "Input Required",
        JOptionPane.WARNING_MESSAGE);
    return;
}

// Database connection instance
DatabaseConnection dbConnection = DatabaseConnection.getInstance();

try (Connection conn = dbConnection.getConnection()) {
    // Query to check if the data already exists in the exams table
    String checkSQL = "SELECT COUNT(*) AS count FROM exams WHERE coursecode = ? AND coursename = ? AND examnumber = ?";
    
    // Query to fetch student_name and studentID
    String selectSQL = "SELECT student_name, studentID FROM student_to_course WHERE coursecode = ?";
    
    // Query to insert into the exams table
    String insertSQL = "INSERT INTO exams (coursecode, coursename, studentid, fullname, examnumber, examresult, examtotal, status) " +
                       "VALUES (?, ?, ?, ?, ?, '', '', '')";

    // Check if the data already exists
    try (PreparedStatement checkStmt = conn.prepareStatement(checkSQL)) {
        checkStmt.setString(1, coursecode);
        checkStmt.setString(2, coursename);
        checkStmt.setString(3, examNameValue);

        try (ResultSet rsCheck = checkStmt.executeQuery()) {
            if (rsCheck.next() && rsCheck.getInt("count") > 0) {
                JOptionPane.showMessageDialog(this,
                    "An exam with the same course code, course name, and exam name already exists.",
                    "Duplicate Entry",
                    JOptionPane.WARNING_MESSAGE);
                return; // Exit the method if a duplicate is found
            }
        }
    }

    // Proceed to fetch students and add new records
    try (PreparedStatement selectStmt = conn.prepareStatement(selectSQL)) {
        selectStmt.setString(1, coursecode);

        try (ResultSet rs = selectStmt.executeQuery()) {
            // Check if data exists
            if (!rs.isBeforeFirst()) {
                JOptionPane.showMessageDialog(this,
                    "No students found for course code: " + coursecode,
                    "No Data",
                    JOptionPane.INFORMATION_MESSAGE);
                return;
            }

            // Prepare the INSERT statement
            try (PreparedStatement insertStmt = conn.prepareStatement(insertSQL)) {
                while (rs.next()) {
                    String studentName = rs.getString("student_name");
                    String studentID = rs.getString("studentID");

                    // Set parameters for INSERT
                    insertStmt.setString(1, coursecode);
                    insertStmt.setString(2, coursename);
                    insertStmt.setString(3, studentID);
                    insertStmt.setString(4, studentName);
                    insertStmt.setString(5, examNameValue);

                    // Execute the insert
                    insertStmt.executeUpdate();
                }
            }
        }
    }
} catch (SQLException e) {
    JOptionPane.showMessageDialog(this,
        "Database error: " + e.getMessage(),
        "Error",
        JOptionPane.ERROR_MESSAGE);
    e.printStackTrace();
}
addData();


    }//GEN-LAST:event_pictureBox1MouseClicked

    private void jLabel7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseClicked
        // TODO add your handling code here:
        String coursecode = courseCode.getText().trim(); // Replace with your JLabel variable name
         String coursename = courseName.getText().trim();
         String examNameValue = examName.getText().trim(); // Replace with your JTextField variable name

    // Validate if course code is provided
    if (coursecode.isEmpty()) {
        JOptionPane.showMessageDialog(this, 
            "Course code is missing. Please ensure it's provided.", 
            "Input Required", 
            JOptionPane.WARNING_MESSAGE);
        return;
    }

    // Confirm deletion action
    int confirm = JOptionPane.showConfirmDialog(this, 
        "Are you sure you want to delete all exams for course code: " + coursecode + 
        (examNameValue.isEmpty() ? "?" : " and exam name: " + examNameValue + "?"), 
        "Confirm Deletion", 
        JOptionPane.YES_NO_OPTION);

    if (confirm != JOptionPane.YES_OPTION) {
        return; // Exit if user cancels
    }

    // Database connection instance
    DatabaseConnection dbConnection = DatabaseConnection.getInstance();

    try (Connection conn = dbConnection.getConnection()) {
        // Delete query
        String deleteSQL = "DELETE FROM exams WHERE coursecode = ?" + 
                           (examNameValue.isEmpty() ? "" : " AND examnumber = ?");

        try (PreparedStatement deleteStmt = conn.prepareStatement(deleteSQL)) {
            // Set parameters for DELETE
            deleteStmt.setString(1, coursecode);
            if (!examNameValue.isEmpty()) {
                deleteStmt.setString(2, examNameValue); // Include quiz name if provided
            }

            // Execute deletion
            int rowsDeleted = deleteStmt.executeUpdate();

            if (rowsDeleted > 0) {
                JOptionPane.showMessageDialog(this, 
                    "Successfully deleted.", 
                    "Deletion Successful", 
                    JOptionPane.INFORMATION_MESSAGE);
            }
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, 
            "Database error: " + e.getMessage(), 
            "Error", 
            JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
    deleteData();
    }//GEN-LAST:event_jLabel7MouseClicked

    private void pictureBox2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pictureBox2MouseClicked
        // TODO add your handling code here:
        String coursecode = courseCode.getText().trim(); // Replace with your JLabel variable name
         String coursename = courseName.getText().trim();
         String examNameValue = examName.getText().trim(); // Replace with your JTextField variable name

    // Validate if course code is provided
    if (coursecode.isEmpty()) {
        JOptionPane.showMessageDialog(this, 
            "Course code is missing. Please ensure it's provided.", 
            "Input Required", 
            JOptionPane.WARNING_MESSAGE);
        return;
    }

    // Confirm deletion action
    int confirm = JOptionPane.showConfirmDialog(this, 
        "Are you sure you want to delete all exams for course code: " + coursecode + 
        (examNameValue.isEmpty() ? "?" : " and exam name: " + examNameValue + "?"), 
        "Confirm Deletion", 
        JOptionPane.YES_NO_OPTION);

    if (confirm != JOptionPane.YES_OPTION) {
        return; // Exit if user cancels
    }

    // Database connection instance
    DatabaseConnection dbConnection = DatabaseConnection.getInstance();

    try (Connection conn = dbConnection.getConnection()) {
        // Delete query
        String deleteSQL = "DELETE FROM exams WHERE coursecode = ?" + 
                           (examNameValue.isEmpty() ? "" : " AND examnumber = ?");

        try (PreparedStatement deleteStmt = conn.prepareStatement(deleteSQL)) {
            // Set parameters for DELETE
            deleteStmt.setString(1, coursecode);
            if (!examNameValue.isEmpty()) {
                deleteStmt.setString(2, examNameValue); // Include quiz name if provided
            }

            // Execute deletion
            int rowsDeleted = deleteStmt.executeUpdate();

            if (rowsDeleted > 0) {
                JOptionPane.showMessageDialog(this, 
                    "Successfully deleted.", 
                    "Deletion Successful", 
                    JOptionPane.INFORMATION_MESSAGE);
            }
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, 
            "Database error: " + e.getMessage(), 
            "Error", 
            JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
    deleteData();
    }//GEN-LAST:event_pictureBox2MouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel courseCode;
    private javax.swing.JLabel courseName;
    public static javax.swing.JTable courseTable;
    private javax.swing.JTextField examName;
    public static javax.swing.JTable examTable;
    private javax.swing.JLabel id;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private Swing.PictureBox pictureBox1;
    private Swing.PictureBox pictureBox2;
    // End of variables declaration//GEN-END:variables
}
